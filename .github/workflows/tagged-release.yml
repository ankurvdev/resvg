name: "Tagged Release"

on:
  push:
    tags:
      - "*"
  workflow_dispatch:
  
env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-20.04
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            - `viewsvg` is a simple application that showcases *resvg* capabilities
            - `resvg-0.*.0.tar.xz` is a sources archive with vendored Rust dependencies
            - `resvg-explorer-extension.exe` is an SVG thumbnailer for Windows Explorer
          draft: false
          prerelease: false
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

  build:
    strategy:
      matrix:
        include:
          - os: windows-2022
            target: x86_64-pc-windows-msvc
            code-target: windows-x86_64
          - os: windows-2022
            target: aarch64-pc-windows-msvc
            code-target: windows-arm64
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            code-target: linux-x86_64
          - os: ubuntu-20.04
            target: aarch64-unknown-linux-gnu
            code-target: linux-aarch64
          - os: macos-11
            target: x86_64-apple-darwin
            code-target: macos-x86_64
          - os: macos-11
            target: aarch64-apple-darwin
            code-target: macos-aarch64

    name: Package ${{ matrix.code-target }}
    runs-on: ${{ matrix.os }}
    needs: ["create-release"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Install Rust toolchain
        run: rustup target add ${{ matrix.target }}

      - name: Install arm64 toolchain
        if: matrix.code-target == 'linux-aarch64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build resvg
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          RUSTFLAGS: -Ctarget-feature=+crt-static # make sure it's static

      - name: Build usvg
        working-directory: crates/usvg
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          RUSTFLAGS: -Ctarget-feature=+crt-static # make sure it's static

      - name: Collect and Compress
        working-directory: target/${{ matrix.target }}/release
        run: |
          mkdir -p ../../../bin
          rm *.d
          7z a -tzip -mx9 ../../../bin/resvg-${{matrix.code-target}}.zip resvg*
          7z a -tzip -mx9 ../../../bin/usvg-${{matrix.code-target}}.zip usvg*

      - name: Upload release binaries
        uses: alexellis/upload-assets@0.4.0
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          asset_paths: '["./bin/*"]'
